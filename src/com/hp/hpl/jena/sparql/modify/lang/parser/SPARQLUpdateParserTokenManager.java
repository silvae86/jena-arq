/* Generated By:JavaCC: Do not edit this line. SPARQLUpdateParserTokenManager.java */
/*
 * (c) Copyright 2007 Hewlett-Packard Development Company, LP
 * All rights reserved.
 */

package com.hp.hpl.jena.sparql.modify.lang.parser ;

//




public class SPARQLUpdateParserTokenManager implements SPARQLUpdateParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 17;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 18;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 20;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 19;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 16;
         return jjMoveNfa_0(0, 0);
      case 33:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 40:
         jjmatchedKind = 74;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 75;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 98;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 96;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 83;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 97;
         return jjMoveNfa_0(0, 0);
      case 46:
         jjmatchedKind = 84;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 99;
         return jjMoveNfa_0(0, 0);
      case 58:
         jjmatchedKind = 93;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 82;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 61:
         jjmatchedKind = 85;
         return jjMoveNfa_0(0, 0);
      case 62:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 64:
         jjmatchedKind = 101;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x800008020L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x80200002000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x4300L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x201000000818L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x80042000000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0xf000000001004L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0xc00000000080L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x10000000000040L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x20100000000400L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 91:
         jjmatchedKind = 79;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 80;
         return jjMoveNfa_0(0, 0);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 97:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x800008020L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x80200002000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4300L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x201000000818L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80042000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xf000000001004L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0xc00000000080L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000040L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20100000000400L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 123:
         jjmatchedKind = 77;
         return jjMoveNfa_0(0, 0);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 125:
         jjmatchedKind = 78;
         return jjMoveNfa_0(0, 0);
      case 126:
         jjmatchedKind = 92;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0e00200000010L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x10001000002048L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000400L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000001004L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000004082L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000a400000a00L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0xf000800000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 94:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0e00200000010L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10001000002048L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000400L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000001004L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000004082L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000a400000a00L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0xf000800000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000080L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 67:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         break;
      case 68:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x4400000300L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000002000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x2020000000000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x88040000000408L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000004040L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000008800L);
      case 82:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000004L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x210000001010L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x41080000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000080L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L);
      case 99:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         break;
      case 100:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4400000300L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000002000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2020000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x88040000000408L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000004040L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000008800L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000004L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x210000001010L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x41080000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000300L);
      case 67:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
         }
         break;
      case 68:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000040cL);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 71:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x8010000002002L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 77:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 79:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000040L);
      case 80:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x3004000008000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 97:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000300L);
      case 99:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
         }
         break;
      case 100:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000040cL);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 103:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8010000002002L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 109:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 111:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000040L);
      case 112:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x3004000008000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 68:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         break;
      case 69:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      case 72:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         break;
      case 73:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400004000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      case 78:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 82:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4L);
      case 84:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x28200000000208L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 88:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         break;
      case 105:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400004000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 114:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x28200000000208L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 120:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 69:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x28000000000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x4010000000000L);
      case 82:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
         }
         break;
      case 84:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 5;
         }
         break;
      case 88:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         break;
      case 89:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 101:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x28000000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4010000000000L);
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
         }
         break;
      case 116:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 5;
         }
         break;
      case 120:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         break;
      case 121:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 75:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
         }
         break;
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x28000000000000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 107:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
         }
         break;
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x28000000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 69:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
         }
         break;
      case 76:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 7;
         }
         break;
      case 77:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 7;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 7;
         }
         break;
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 7;
         }
         break;
      case 109:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      case 76:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 8;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 10;
         }
         break;
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7e00000000ffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec11 = {
   0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 152;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddStates(0, 7);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(8, 12);
                  else if (curChar == 43)
                     jjCheckNAddStates(13, 17);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(101, 102);
                  else if (curChar == 58)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAdd(80);
                  }
                  else if (curChar == 40)
                     jjCheckNAddStates(18, 20);
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 55;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(6, 7);
                  else if (curChar == 35)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAddStates(21, 23);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if (curChar == 34)
                     jjCheckNAddStates(24, 26);
                  else if (curChar == 39)
                     jjCheckNAddStates(27, 29);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAddStates(21, 23);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 3:
                  if (curChar == 10 && kind > 22)
                     kind = 22;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xaffffffa00000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 62 && kind > 23)
                     kind = 23;
                  break;
               case 8:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if ((0x3ff200000000000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 13:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(18);
                  break;
               case 21:
                  if (curChar == 45)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 24:
                  if ((0x8400000000L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 25:
                  if (curChar == 39)
                     jjCheckNAddStates(27, 29);
                  break;
               case 26:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 28:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 29:
                  if (curChar == 39 && kind > 69)
                     kind = 69;
                  break;
               case 30:
                  if (curChar == 34)
                     jjCheckNAddStates(24, 26);
                  break;
               case 31:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 33:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 34:
                  if (curChar == 34 && kind > 70)
                     kind = 70;
                  break;
               case 35:
                  if (curChar == 39)
                     jjCheckNAddStates(30, 33);
                  break;
               case 36:
               case 41:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 37:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 39:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 40:
                  if (curChar == 39)
                     jjAddStates(34, 35);
                  break;
               case 42:
                  if (curChar == 39 && kind > 71)
                     kind = 71;
                  break;
               case 43:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 45:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 34)
                     jjCheckNAddStates(36, 39);
                  break;
               case 47:
               case 52:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 48:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 50:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 51:
                  if (curChar == 34)
                     jjAddStates(40, 41);
                  break;
               case 53:
                  if (curChar == 34 && kind > 72)
                     kind = 72;
                  break;
               case 54:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 56:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 40)
                     jjCheckNAddStates(18, 20);
                  break;
               case 58:
                  if (curChar == 35)
                     jjCheckNAddStates(42, 47);
                  break;
               case 59:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(42, 47);
                  break;
               case 60:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 61:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 62:
                  if (curChar == 41 && kind > 76)
                     kind = 76;
                  break;
               case 63:
                  if (curChar == 10)
                     jjCheckNAddStates(18, 20);
                  break;
               case 64:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if (curChar == 35)
                     jjCheckNAddStates(48, 53);
                  break;
               case 67:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(48, 53);
                  break;
               case 68:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(54, 56);
                  break;
               case 69:
                  if ((0x100003600L & l) != 0L)
                     jjCheckNAddStates(54, 56);
                  break;
               case 71:
                  if (curChar == 10)
                     jjCheckNAddStates(54, 56);
                  break;
               case 72:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 74:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 75:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if (curChar == 58 && kind > 24)
                     kind = 24;
                  break;
               case 77:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 78:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if (curChar == 58)
                     jjCheckNAdd(80);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddTwoStates(81, 82);
                  break;
               case 81:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if ((0x3ff200000000000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 83:
                  if (curChar != 58)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(80);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(0, 7);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(85);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 87:
                  if (curChar != 46)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(88);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(88);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 90:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(91, 92);
                  break;
               case 93:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(94);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(95, 96);
                  break;
               case 97:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(98);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(98);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(99);
                  break;
               case 100:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(101, 102);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(101);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 104:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(105);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(105);
                  break;
               case 106:
                  if (curChar == 43)
                     jjCheckNAddStates(13, 17);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(107);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(108, 109);
                  break;
               case 109:
                  if (curChar != 46)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(110);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(110);
                  break;
               case 111:
                  if (curChar == 46)
                     jjCheckNAdd(112);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(112);
                  break;
               case 113:
                  if (curChar == 46)
                     jjCheckNAdd(114);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(114, 115);
                  break;
               case 116:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(117);
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(117);
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(61, 64);
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(119, 120);
                  break;
               case 120:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 123:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(124);
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(124);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(125, 126);
                  break;
               case 127:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(128);
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(128);
                  break;
               case 129:
                  if (curChar == 45)
                     jjCheckNAddStates(8, 12);
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(130);
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(131, 132);
                  break;
               case 132:
                  if (curChar != 46)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(133);
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(133);
                  break;
               case 134:
                  if (curChar == 46)
                     jjCheckNAdd(135);
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(135);
                  break;
               case 136:
                  if (curChar == 46)
                     jjCheckNAdd(137);
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(137, 138);
                  break;
               case 139:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(140);
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(140);
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(65, 68);
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(142, 143);
                  break;
               case 143:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(144, 145);
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(144, 145);
                  break;
               case 146:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(147);
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(147);
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(148, 149);
                  break;
               case 150:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(151);
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(151);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(69, 74);
                  else if (curChar == 91)
                     jjCheckNAddStates(54, 56);
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 64)
                     jjCheckNAdd(20);
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 1:
                  if (kind > 22)
                     kind = 22;
                  jjAddStates(21, 23);
                  break;
               case 6:
                  if ((0xc7fffffeafffffffL & l) != 0L)
                     jjAddStates(75, 76);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 12:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 14:
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(15);
                  break;
               case 17:
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 64)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x14404410000000L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 27:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 31:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 32:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 37:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 38:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 48:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 49:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 59:
                  jjAddStates(42, 47);
                  break;
               case 65:
                  if (curChar == 91)
                     jjCheckNAddStates(54, 56);
                  break;
               case 67:
                  jjCheckNAddStates(48, 53);
                  break;
               case 70:
                  if (curChar == 93 && kind > 81)
                     kind = 81;
                  break;
               case 73:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(69, 74);
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(74, 75);
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 78:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 80:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddTwoStates(81, 82);
                  break;
               case 81:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 92:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 96:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(79, 80);
                  break;
               case 103:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 115:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 122:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(85, 86);
                  break;
               case 126:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(87, 88);
                  break;
               case 138:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(89, 90);
                  break;
               case 145:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(91, 92);
                  break;
               case 149:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(93, 94);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(69, 74);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjAddStates(21, 23);
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(75, 76);
                  break;
               case 9:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 26)
                     kind = 26;
                  break;
               case 14:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(15);
                  break;
               case 15:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(15);
                  break;
               case 17:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(18);
                  break;
               case 18:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(18);
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(27, 29);
                  break;
               case 31:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(24, 26);
                  break;
               case 37:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(30, 33);
                  break;
               case 48:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(36, 39);
                  break;
               case 59:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(42, 47);
                  break;
               case 67:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(48, 53);
                  break;
               case 74:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(74, 75);
                  break;
               case 75:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(76);
                  break;
               case 77:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 78:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(79);
                  break;
               case 80:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddTwoStates(81, 82);
                  break;
               case 81:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 25)
                     kind = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 152 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   85, 86, 87, 89, 90, 95, 96, 99, 130, 131, 134, 136, 141, 107, 108, 111, 
   113, 118, 58, 61, 62, 1, 2, 4, 31, 32, 34, 26, 27, 29, 36, 37, 
   38, 40, 41, 43, 47, 48, 49, 51, 52, 54, 58, 59, 60, 64, 61, 62, 
   66, 67, 68, 72, 69, 70, 66, 69, 70, 74, 75, 77, 78, 119, 120, 125, 
   126, 142, 143, 148, 149, 74, 75, 76, 77, 78, 79, 6, 7, 93, 94, 97, 
   98, 104, 105, 116, 117, 123, 124, 127, 128, 139, 140, 146, 147, 150, 151, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 47:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\141", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\50", "\51", null, "\173", "\175", "\133", "\135", 
null, "\73", "\54", "\56", "\75", "\41\75", "\76", "\74", "\74\75", "\76\75", "\41", 
"\176", "\72", "\174\174", "\46\46", "\53", "\55", "\52", "\57", "\136\136", "\100", 
null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffff3f80ffffL, 0x3ffffffff1L, 
};
static final long[] jjtoSkip = {
   0x5f0000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x400000L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[152];
private final int[] jjstateSet = new int[304];
protected char curChar;
public SPARQLUpdateParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SPARQLUpdateParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 152; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
